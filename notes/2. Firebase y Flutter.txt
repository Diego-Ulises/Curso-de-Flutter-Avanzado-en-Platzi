Integrando Firebase Authentication, Cloud Firestore y Firebase Storage al proyecto
Te hemos escuchado y finalmente traemos a este curso la integración con Firebase y Flutter, pero ojo con la compatibilidad entre librerías. Para que nada se nos ““rompa”” nuestra querida profesora ha desarrollado unos ““hacks”” para que funcione tanto en iOS como en Android, sigue paso a paso los códigos y cuéntanos en los comentarios.

Vamos a añadir un proyecto a Firebase, le colocaremos un nombre y finalmente creamos el proyecto; registraremos la aplicación para Android y pondremos los campos que nos piden, necesitaremos registrar una clave SHA-01 y es muy recomendado que lo hagamos para mayor seguridad.

Luego descargaremos un archivo llamado google-services.json el cual pondremos en la carpeta app de nuestro proyecto. Debemos cambiar la directiva minSdkVersion en el archivo build.gradle que está en la carpeta app al valor 21 para tener una mayor compatibilidad.

Ahora añadiremos el SDK de Firebase en nuestro proyecto para empezar a trabajar con él, iremos al archivo build.gradle que se encuentra en la raíz de nuestro proyecto, iremos a la parte de dependencias y añadiremos la línea de código que nos dice; ahora iremos al archivo build.gradle en la carpeta app para añadir otra implementación en la parte de dependencias, y nada más, cualquier otra configuración que diga Firebase para el SDK ya no es necesario para nuestro proyecto.

Integrando Firebase a Flutter para Android
En esta clase veremos como configurar Firebase para que funcione completamente con Android y no genere ningún error.

Repasemos los puntos que haremos con Android:

No implementar Firebase como librería en el proyecto Android. (Ya lo hicimos)
Para FirebaseAuth:
gradle.properties añadir las líneas:
android.useAndroidX=true
android.enableJetifier=true
compileSdkVersion 28
targetSdkVersion 28
Para CloudFirestore:
android {
        defaultConfig {
                multiDexEnabled true
        }
}
Ahora iremos a nuestro archivo pubspect.yaml y vamos a colocar las siguientes dependencias: Firebase_auth, google_sign_in, firebase_storage y cloud_firestore; las cuales puedes encontrar en el repositorio de paquetes de Dart

https://pub.dev/packages

Integrando Firebase a Flutter para iOS
Ahora en esta clase configuraremos Flutter y Firebase para iOS. Cuando desarrollamos con Flutter debemos siempre tener un ojo en Android y otro en iOS, en lo que instalación de paquetes respecta, una que funciona bien en Android puede romperse en iOS o viceversa; en esta clase te mostraremos cómo implementar bien iOS.

Debemos registrar la aplicación en Firebase así como lo hicimos para registrarlo con Android.

Repasemos los puntos que irán en este vídeo:

No implementar Firebase con cocoapods.
Pegar el archivo GoogleService-Info.plist a nivel de Runner
Para Google Sign In:
Copiar el fragmento de código para el key CFBundleURLTypes que se encuentra aquí.
Para CloudFirestore:
Actualizar Firebase con el comando pod: $ pod update Firebase


Autenticación de Firebase con Google
En esta clase veremos como implementar la autenticación con Firebase. Debemos entrar a firebase entrar en nuestro proyecto, ir al apartado de “Authentication” y activar la autenticación con Google.

Streams en Flutter
Vamos a empezar a transmitir datos en nuestra aplicación, que en este caso será con Firebase; para esto Flutter usa Streams: son datos que vivirán en un flujo, una corriente de datos para llegar un servidor o regresar de un servidor. Podrían ser textos, imágenes, archivos e incluso un Stream puede ser otro Stream.

Manejando una sesión con Firebase Authentication y Flutter
Para solucionar el error 12500 en SignIn de Google hice lo siguiente:
en la consola de firebase ir a configuración -> usuarios y permisos -> configuración avanzada
Luego una vez en la consola cloud de google ir a Credenciales
y hacer lo siguiente:
completar los enlaces con el dominio: http://<id_project>.firebaseapp.com